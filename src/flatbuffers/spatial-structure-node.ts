// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers'

export class SpatialStructureNode {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): SpatialStructureNode {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsSpatialStructureNode(bb: flatbuffers.ByteBuffer, obj?: SpatialStructureNode): SpatialStructureNode {
    return (obj || new SpatialStructureNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsSpatialStructureNode(bb: flatbuffers.ByteBuffer, obj?: SpatialStructureNode): SpatialStructureNode {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new SpatialStructureNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  expressId(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0')
  }

  children(index: number, obj?: SpatialStructureNode): SpatialStructureNode | null {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? (obj || new SpatialStructureNode()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null
  }

  childrenLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  static startSpatialStructureNode(builder: flatbuffers.Builder) {
    builder.startObject(2)
  }

  static addExpressId(builder: flatbuffers.Builder, expressId: bigint) {
    builder.addFieldInt64(0, expressId, BigInt('0'))
  }

  static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, childrenOffset, 0)
  }

  static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!)
    }
    return builder.endVector()
  }

  static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static endSpatialStructureNode(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    builder.requiredField(offset, 6) // children
    return offset
  }

  static createSpatialStructureNode(builder: flatbuffers.Builder, expressId: bigint, childrenOffset: flatbuffers.Offset): flatbuffers.Offset {
    SpatialStructureNode.startSpatialStructureNode(builder)
    SpatialStructureNode.addExpressId(builder, expressId)
    SpatialStructureNode.addChildren(builder, childrenOffset)
    return SpatialStructureNode.endSpatialStructureNode(builder)
  }
}
