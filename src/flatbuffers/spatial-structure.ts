// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers'

import { SpatialStructureNode } from './spatial-structure-node'

export class SpatialStructure {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): SpatialStructure {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsSpatialStructure(bb: flatbuffers.ByteBuffer, obj?: SpatialStructure): SpatialStructure {
    return (obj || new SpatialStructure()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsSpatialStructure(bb: flatbuffers.ByteBuffer, obj?: SpatialStructure): SpatialStructure {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new SpatialStructure()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  node(obj?: SpatialStructureNode): SpatialStructureNode | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? (obj || new SpatialStructureNode()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null
  }

  static startSpatialStructure(builder: flatbuffers.Builder) {
    builder.startObject(1)
  }

  static addNode(builder: flatbuffers.Builder, nodeOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, nodeOffset, 0)
  }

  static endSpatialStructure(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    builder.requiredField(offset, 4) // node
    return offset
  }

  static createSpatialStructure(builder: flatbuffers.Builder, nodeOffset: flatbuffers.Offset): flatbuffers.Offset {
    SpatialStructure.startSpatialStructure(builder)
    SpatialStructure.addNode(builder, nodeOffset)
    return SpatialStructure.endSpatialStructure(builder)
  }
}
