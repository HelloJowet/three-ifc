// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers'

import { Geometry } from './geometry'
import { Material } from './material'
import { MeshInstance } from './mesh-instance'

export class InstancedMesh {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): InstancedMesh {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsInstancedMesh(bb: flatbuffers.ByteBuffer, obj?: InstancedMesh): InstancedMesh {
    return (obj || new InstancedMesh()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsInstancedMesh(bb: flatbuffers.ByteBuffer, obj?: InstancedMesh): InstancedMesh {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new InstancedMesh()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  id(): string | null
  id(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  id(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null
  }

  geometry(obj?: Geometry): Geometry | null {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? (obj || new Geometry()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null
  }

  material(obj?: Material): Material | null {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? (obj || new Material()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null
  }

  instances(index: number, obj?: MeshInstance): MeshInstance | null {
    const offset = this.bb!.__offset(this.bb_pos, 10)
    return offset ? (obj || new MeshInstance()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null
  }

  instancesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 10)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  static startInstancedMesh(builder: flatbuffers.Builder) {
    builder.startObject(4)
  }

  static addId(builder: flatbuffers.Builder, idOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, idOffset, 0)
  }

  static addGeometry(builder: flatbuffers.Builder, geometryOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, geometryOffset, 0)
  }

  static addMaterial(builder: flatbuffers.Builder, materialOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, materialOffset, 0)
  }

  static addInstances(builder: flatbuffers.Builder, instancesOffset: flatbuffers.Offset) {
    builder.addFieldOffset(3, instancesOffset, 0)
  }

  static createInstancesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!)
    }
    return builder.endVector()
  }

  static startInstancesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static endInstancedMesh(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    builder.requiredField(offset, 4) // id
    builder.requiredField(offset, 6) // geometry
    builder.requiredField(offset, 8) // material
    builder.requiredField(offset, 10) // instances
    return offset
  }
}
