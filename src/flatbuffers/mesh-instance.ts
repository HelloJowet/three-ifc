// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers'

import { Color } from './color'

export class MeshInstance {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): MeshInstance {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsMeshInstance(bb: flatbuffers.ByteBuffer, obj?: MeshInstance): MeshInstance {
    return (obj || new MeshInstance()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsMeshInstance(bb: flatbuffers.ByteBuffer, obj?: MeshInstance): MeshInstance {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new MeshInstance()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  id(): string | null
  id(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  id(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null
  }

  expressId(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0')
  }

  transformationMatrix(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0
  }

  transformationMatrixLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  transformationMatrixArray(): Float32Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset
      ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset))
      : null
  }

  color(obj?: Color): Color | null {
    const offset = this.bb!.__offset(this.bb_pos, 10)
    return offset ? (obj || new Color()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null
  }

  static startMeshInstance(builder: flatbuffers.Builder) {
    builder.startObject(4)
  }

  static addId(builder: flatbuffers.Builder, idOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, idOffset, 0)
  }

  static addExpressId(builder: flatbuffers.Builder, expressId: bigint) {
    builder.addFieldInt64(1, expressId, BigInt('0'))
  }

  static addTransformationMatrix(builder: flatbuffers.Builder, transformationMatrixOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, transformationMatrixOffset, 0)
  }

  static createTransformationMatrixVector(builder: flatbuffers.Builder, data: number[] | Float32Array): flatbuffers.Offset
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createTransformationMatrixVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset
  static createTransformationMatrixVector(builder: flatbuffers.Builder, data: number[] | Float32Array | Uint8Array): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]!)
    }
    return builder.endVector()
  }

  static startTransformationMatrixVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static addColor(builder: flatbuffers.Builder, colorOffset: flatbuffers.Offset) {
    builder.addFieldOffset(3, colorOffset, 0)
  }

  static endMeshInstance(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    builder.requiredField(offset, 4) // id
    builder.requiredField(offset, 8) // transformation_matrix
    builder.requiredField(offset, 10) // color
    return offset
  }
}
