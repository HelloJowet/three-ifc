// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers'

import { InstancedMesh } from './instanced-mesh'

export class Group {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): Group {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsGroup(bb: flatbuffers.ByteBuffer, obj?: Group): Group {
    return (obj || new Group()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsGroup(bb: flatbuffers.ByteBuffer, obj?: Group): Group {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Group()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  instancedMeshes(index: number, obj?: InstancedMesh): InstancedMesh | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? (obj || new InstancedMesh()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null
  }

  instancedMeshesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  static startGroup(builder: flatbuffers.Builder) {
    builder.startObject(1)
  }

  static addInstancedMeshes(builder: flatbuffers.Builder, instancedMeshesOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, instancedMeshesOffset, 0)
  }

  static createInstancedMeshesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!)
    }
    return builder.endVector()
  }

  static startInstancedMeshesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static endGroup(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    builder.requiredField(offset, 4) // instanced_meshes
    return offset
  }

  static createGroup(builder: flatbuffers.Builder, instancedMeshesOffset: flatbuffers.Offset): flatbuffers.Offset {
    Group.startGroup(builder)
    Group.addInstancedMeshes(builder, instancedMeshesOffset)
    return Group.endGroup(builder)
  }
}
