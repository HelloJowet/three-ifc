// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers'

import { Property } from './property'

export class EntityInstance {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): EntityInstance {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsEntityInstance(bb: flatbuffers.ByteBuffer, obj?: EntityInstance): EntityInstance {
    return (obj || new EntityInstance()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsEntityInstance(bb: flatbuffers.ByteBuffer, obj?: EntityInstance): EntityInstance {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new EntityInstance()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  expressId(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0')
  }

  type(): string | null
  type(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  type(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null
  }

  properties(index: number, obj?: Property): Property | null {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? (obj || new Property()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null
  }

  propertiesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  static startEntityInstance(builder: flatbuffers.Builder) {
    builder.startObject(3)
  }

  static addExpressId(builder: flatbuffers.Builder, expressId: bigint) {
    builder.addFieldInt64(0, expressId, BigInt('0'))
  }

  static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, typeOffset, 0)
  }

  static addProperties(builder: flatbuffers.Builder, propertiesOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, propertiesOffset, 0)
  }

  static createPropertiesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!)
    }
    return builder.endVector()
  }

  static startPropertiesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static endEntityInstance(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    builder.requiredField(offset, 6) // type
    builder.requiredField(offset, 8) // properties
    return offset
  }

  static createEntityInstance(builder: flatbuffers.Builder, expressId: bigint, typeOffset: flatbuffers.Offset, propertiesOffset: flatbuffers.Offset): flatbuffers.Offset {
    EntityInstance.startEntityInstance(builder)
    EntityInstance.addExpressId(builder, expressId)
    EntityInstance.addType(builder, typeOffset)
    EntityInstance.addProperties(builder, propertiesOffset)
    return EntityInstance.endEntityInstance(builder)
  }
}
