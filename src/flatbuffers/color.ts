// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers'

export class Color {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): Color {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsColor(bb: flatbuffers.ByteBuffer, obj?: Color): Color {
    return (obj || new Color()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsColor(bb: flatbuffers.ByteBuffer, obj?: Color): Color {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Color()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  r(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0
  }

  g(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0
  }

  b(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0
  }

  static startColor(builder: flatbuffers.Builder) {
    builder.startObject(3)
  }

  static addR(builder: flatbuffers.Builder, r: number) {
    builder.addFieldFloat32(0, r, 0.0)
  }

  static addG(builder: flatbuffers.Builder, g: number) {
    builder.addFieldFloat32(1, g, 0.0)
  }

  static addB(builder: flatbuffers.Builder, b: number) {
    builder.addFieldFloat32(2, b, 0.0)
  }

  static endColor(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createColor(builder: flatbuffers.Builder, r: number, g: number, b: number): flatbuffers.Offset {
    Color.startColor(builder)
    Color.addR(builder, r)
    Color.addG(builder, g)
    Color.addB(builder, b)
    return Color.endColor(builder)
  }
}
