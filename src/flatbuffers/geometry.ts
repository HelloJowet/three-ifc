// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers'

export class Geometry {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): Geometry {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsGeometry(bb: flatbuffers.ByteBuffer, obj?: Geometry): Geometry {
    return (obj || new Geometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsGeometry(bb: flatbuffers.ByteBuffer, obj?: Geometry): Geometry {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Geometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  vertices(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0
  }

  verticesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  verticesArray(): Float32Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset))
      : null
  }

  normals(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0
  }

  normalsLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  normalsArray(): Float32Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset
      ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset))
      : null
  }

  indices(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0
  }

  indicesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  indicesArray(): Uint32Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset
      ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset))
      : null
  }

  static startGeometry(builder: flatbuffers.Builder) {
    builder.startObject(3)
  }

  static addVertices(builder: flatbuffers.Builder, verticesOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, verticesOffset, 0)
  }

  static createVerticesVector(builder: flatbuffers.Builder, data: number[] | Float32Array): flatbuffers.Offset
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createVerticesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset
  static createVerticesVector(builder: flatbuffers.Builder, data: number[] | Float32Array | Uint8Array): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]!)
    }
    return builder.endVector()
  }

  static startVerticesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static addNormals(builder: flatbuffers.Builder, normalsOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, normalsOffset, 0)
  }

  static createNormalsVector(builder: flatbuffers.Builder, data: number[] | Float32Array): flatbuffers.Offset
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createNormalsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset
  static createNormalsVector(builder: flatbuffers.Builder, data: number[] | Float32Array | Uint8Array): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]!)
    }
    return builder.endVector()
  }

  static startNormalsVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, indicesOffset, 0)
  }

  static createIndicesVector(builder: flatbuffers.Builder, data: number[] | Uint32Array): flatbuffers.Offset
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createIndicesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset
  static createIndicesVector(builder: flatbuffers.Builder, data: number[] | Uint32Array | Uint8Array): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt32(data[i]!)
    }
    return builder.endVector()
  }

  static startIndicesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static endGeometry(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    builder.requiredField(offset, 4) // vertices
    builder.requiredField(offset, 6) // normals
    builder.requiredField(offset, 8) // indices
    return offset
  }

  static createGeometry(
    builder: flatbuffers.Builder,
    verticesOffset: flatbuffers.Offset,
    normalsOffset: flatbuffers.Offset,
    indicesOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    Geometry.startGeometry(builder)
    Geometry.addVertices(builder, verticesOffset)
    Geometry.addNormals(builder, normalsOffset)
    Geometry.addIndices(builder, indicesOffset)
    return Geometry.endGeometry(builder)
  }
}
