// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers'

export class Material {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): Material {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsMaterial(bb: flatbuffers.ByteBuffer, obj?: Material): Material {
    return (obj || new Material()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsMaterial(bb: flatbuffers.ByteBuffer, obj?: Material): Material {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Material()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  opacity(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0
  }

  static startMaterial(builder: flatbuffers.Builder) {
    builder.startObject(1)
  }

  static addOpacity(builder: flatbuffers.Builder, opacity: number) {
    builder.addFieldFloat32(0, opacity, 0.0)
  }

  static endMaterial(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createMaterial(builder: flatbuffers.Builder, opacity: number): flatbuffers.Offset {
    Material.startMaterial(builder)
    Material.addOpacity(builder, opacity)
    return Material.endMaterial(builder)
  }
}
